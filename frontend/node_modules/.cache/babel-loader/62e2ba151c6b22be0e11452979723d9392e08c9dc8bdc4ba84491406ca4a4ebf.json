{"ast":null,"code":"import { SIGNIN_SUCCESS, SIGNIN_FAIL, USER_LOADED_SUCCESS, USER_LOADED_FAIL, AUTHENTICATED_SUCCESS, AUTHENTICATED_FAIL, PASSWORD_RESET_FAIL, PASSWORD_RESET_SUCCESS, PASSWORD_RESET_CONFIRM_FAIL, PASSWORD_RESET_CONFIRM_SUCCESS, LOGOUT, SIGNUP_SUCCESS, SIGNUP_FAIL, ACTIVATION_SUCCESS, ACTIVATION_FAIL, GOOGLE_AUTH_SUCCESS, GOOGLE_AUTH_FAIL } from \"./types\";\nimport axios from \"axios\";\nexport const accountExists = async email => {\n  try {\n    const response = await axios.get(`/api/check-email-exists/?email=${email}`);\n    return response.data.exists;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const accountVerified = async email => {\n  try {\n    const response = await axios.get(`/api/check-user-verified/?email=${email}`);\n    return response.data.exists;\n  } catch (error) {\n    throw error;\n  }\n};\nexport const checkAuthenticated = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      token: localStorage.getItem(\"access\")\n    });\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config).then(response => {\n      response.data.code !== \"token_not_valid\" ? dispatch({\n        type: AUTHENTICATED_SUCCESS\n      }) : dispatch({\n        type: AUTHENTICATED_FAIL\n      });\n    }).catch(error => {\n      dispatch({\n        type: AUTHENTICATED_FAIL,\n        error: error\n      });\n    });\n  } else {\n    dispatch({\n      type: AUTHENTICATED_FAIL\n    });\n  }\n};\nexport const load_user = () => async dispatch => {\n  if (localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: `JWT ${localStorage.getItem(\"access\")}`,\n        Accept: \"application/json\"\n      }\n    };\n    await axios.get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config).then(response => {\n      dispatch({\n        type: USER_LOADED_SUCCESS,\n        payload: response.data\n      });\n    }).catch(error => {\n      console.log(error);\n      dispatch({\n        type: USER_LOADED_FAIL,\n        error: error\n      });\n    });\n  } else {\n    dispatch({\n      type: USER_LOADED_FAIL\n    });\n  }\n};\nexport const googleAuth = (state, code) => async dispatch => {\n  if (state && code && !localStorage.getItem(\"access\")) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\n      }\n    };\n    const details = {\n      state: state,\n      code: code\n    };\n    const body = Object.keys(details).map(key => encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])).join(\"&\");\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${body}`, config).then(response => {\n      dispatch({\n        type: GOOGLE_AUTH_SUCCESS,\n        payload: response.data\n      });\n      dispatch(load_user());\n    }).catch(error => {\n      dispatch({\n        type: GOOGLE_AUTH_FAIL,\n        payload: {\n          error: error\n        }\n      });\n    });\n  }\n};\nexport const signin = (email, password) => async dispatch => {\n  const isRegistered = await accountExists(email);\n  if (isRegistered) {\n    const isVerified = await accountVerified(email);\n    if (isVerified) {\n      const config = {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      };\n      const body = JSON.stringify({\n        email,\n        password\n      });\n      await axios.post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config).then(response => {\n        dispatch({\n          type: SIGNIN_SUCCESS,\n          payload: response.data\n        });\n        dispatch(load_user());\n      }).catch(error => {\n        dispatch({\n          type: SIGNIN_FAIL,\n          payload: {\n            error: error.response.status === 401 ? \"Wrong password.\" : \"An error occured. Please try again.\"\n          }\n        });\n      });\n    } else {\n      dispatch({\n        type: SIGNIN_FAIL,\n        payload: {\n          error: \"Your email address is not verified. Please follow the link sent to your email adress to verify your account.\"\n        }\n      });\n    }\n  } else {\n    dispatch({\n      type: SIGNIN_FAIL,\n      payload: {\n        error: \"You do not have an account. Sign up instead.\"\n      }\n    });\n  }\n};\nexport const signup = (email, password, re_password, first_name, last_name) => async dispatch => {\n  const isRegistered = await accountExists(email);\n  if (!isRegistered) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password,\n      re_password,\n      first_name,\n      last_name\n    });\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config).then(response => {\n      dispatch({\n        type: SIGNUP_SUCCESS,\n        payload: response.data\n      });\n      dispatch(load_user());\n    }).catch(error => {\n      dispatch({\n        type: SIGNUP_FAIL,\n        payload: {\n          error: \"An error occured. Please try again.\"\n        }\n      });\n    });\n  } else {\n    dispatch({\n      type: SIGNUP_FAIL,\n      payload: {\n        error: \"You already have an account. Sign in instead.\"\n      }\n    });\n  }\n};\nexport const verify = (uid, token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token\n  });\n  await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/activation/`, body, config).then(response => {\n    dispatch({\n      type: ACTIVATION_SUCCESS,\n      payload: response.data\n    });\n  }).catch(error => {\n    dispatch({\n      type: ACTIVATION_FAIL,\n      payload: error\n    });\n  });\n};\nexport const reset_password = email => async dispatch => {\n  const isRegistered = await accountExists(email);\n  if (isRegistered) {\n    const config = {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const body = JSON.stringify({\n      email\n    });\n    await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password/`, body, config).then(() => {\n      dispatch({\n        type: PASSWORD_RESET_SUCCESS\n      });\n    }).catch(() => {\n      dispatch({\n        type: PASSWORD_RESET_FAIL\n      });\n    });\n  } else {\n    dispatch({\n      type: PASSWORD_RESET_FAIL,\n      payload: {\n        error: \"You do not have an account. Sign up instead.\"\n      }\n    });\n  }\n};\nexport const reset_password_confirm = (uid, token, new_password, re_new_password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    uid,\n    token,\n    new_password,\n    re_new_password\n  });\n  await axios.post(`${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`, body, config).then(() => {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_SUCCESS\n    });\n  }).catch(error => {\n    dispatch({\n      type: PASSWORD_RESET_CONFIRM_FAIL,\n      payload: {\n        error: error.response.status === 400 ? \"Your reset link is not valid. Please request another link.\" : \"An error occured please try again.\"\n      }\n    });\n  });\n};\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"names":["SIGNIN_SUCCESS","SIGNIN_FAIL","USER_LOADED_SUCCESS","USER_LOADED_FAIL","AUTHENTICATED_SUCCESS","AUTHENTICATED_FAIL","PASSWORD_RESET_FAIL","PASSWORD_RESET_SUCCESS","PASSWORD_RESET_CONFIRM_FAIL","PASSWORD_RESET_CONFIRM_SUCCESS","LOGOUT","SIGNUP_SUCCESS","SIGNUP_FAIL","ACTIVATION_SUCCESS","ACTIVATION_FAIL","GOOGLE_AUTH_SUCCESS","GOOGLE_AUTH_FAIL","axios","accountExists","email","response","get","data","exists","error","accountVerified","checkAuthenticated","dispatch","localStorage","getItem","config","headers","Accept","body","JSON","stringify","token","post","process","env","REACT_APP_API_URL","then","code","type","catch","load_user","Authorization","payload","console","log","googleAuth","state","details","Object","keys","map","key","encodeURIComponent","join","signin","password","isRegistered","isVerified","status","signup","re_password","first_name","last_name","verify","uid","reset_password","reset_password_confirm","new_password","re_new_password","logout"],"sources":["D:/Japhe/Code/django-react/primermovies/frontend/src/actions/auth.js"],"sourcesContent":["import {\r\n  SIGNIN_SUCCESS,\r\n  SIGNIN_FAIL,\r\n  USER_LOADED_SUCCESS,\r\n  USER_LOADED_FAIL,\r\n  AUTHENTICATED_SUCCESS,\r\n  AUTHENTICATED_FAIL,\r\n  PASSWORD_RESET_FAIL,\r\n  PASSWORD_RESET_SUCCESS,\r\n  PASSWORD_RESET_CONFIRM_FAIL,\r\n  PASSWORD_RESET_CONFIRM_SUCCESS,\r\n  LOGOUT,\r\n  SIGNUP_SUCCESS,\r\n  SIGNUP_FAIL,\r\n  ACTIVATION_SUCCESS,\r\n  ACTIVATION_FAIL,\r\n  GOOGLE_AUTH_SUCCESS,\r\n  GOOGLE_AUTH_FAIL,\r\n} from \"./types\";\r\nimport axios from \"axios\";\r\n\r\nexport const accountExists = async (email) => {\r\n  try {\r\n    const response = await axios.get(`/api/check-email-exists/?email=${email}`);\r\n    return response.data.exists;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const accountVerified = async (email) => {\r\n  try {\r\n    const response = await axios.get(\r\n      `/api/check-user-verified/?email=${email}`\r\n    );\r\n    return response.data.exists;\r\n  } catch (error) {\r\n    throw error;\r\n  }\r\n};\r\n\r\nexport const checkAuthenticated = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n    const body = JSON.stringify({ token: localStorage.getItem(\"access\") });\r\n    await axios\r\n      .post(`${process.env.REACT_APP_API_URL}/auth/jwt/verify/`, body, config)\r\n      .then((response) => {\r\n        response.data.code !== \"token_not_valid\"\r\n          ? dispatch({\r\n              type: AUTHENTICATED_SUCCESS,\r\n            })\r\n          : dispatch({\r\n              type: AUTHENTICATED_FAIL,\r\n            });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: AUTHENTICATED_FAIL,\r\n          error: error,\r\n        });\r\n      });\r\n  } else {\r\n    dispatch({ type: AUTHENTICATED_FAIL });\r\n  }\r\n};\r\n\r\nexport const load_user = () => async (dispatch) => {\r\n  if (localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `JWT ${localStorage.getItem(\"access\")}`,\r\n        Accept: \"application/json\",\r\n      },\r\n    };\r\n    await axios\r\n      .get(`${process.env.REACT_APP_API_URL}/auth/users/me/`, config)\r\n      .then((response) => {\r\n        dispatch({\r\n          type: USER_LOADED_SUCCESS,\r\n          payload: response.data,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n        dispatch({\r\n          type: USER_LOADED_FAIL,\r\n          error: error,\r\n        });\r\n      });\r\n  } else {\r\n    dispatch({\r\n      type: USER_LOADED_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const googleAuth = (state, code) => async (dispatch) => {\r\n  if (state && code && !localStorage.getItem(\"access\")) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\r\n      },\r\n    };\r\n\r\n    const details = { state: state, code: code };\r\n    const body = Object.keys(details)\r\n      .map(\r\n        (key) =>\r\n          encodeURIComponent(key) + \"=\" + encodeURIComponent(details[key])\r\n      )\r\n      .join(\"&\");\r\n    await axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/auth/o/google-oauth2/?${body}`,\r\n        config\r\n      )\r\n      .then((response) => {\r\n        dispatch({\r\n          type: GOOGLE_AUTH_SUCCESS,\r\n          payload: response.data,\r\n        });\r\n        dispatch(load_user());\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: GOOGLE_AUTH_FAIL,\r\n          payload: { error: error },\r\n        });\r\n      });\r\n  }\r\n};\r\n\r\nexport const signin = (email, password) => async (dispatch) => {\r\n  const isRegistered = await accountExists(email);\r\n  if (isRegistered) {\r\n    const isVerified = await accountVerified(email);\r\n    if (isVerified) {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const body = JSON.stringify({ email, password });\r\n\r\n      await axios\r\n        .post(`${process.env.REACT_APP_API_URL}/auth/jwt/create/`, body, config)\r\n        .then((response) => {\r\n          dispatch({\r\n            type: SIGNIN_SUCCESS,\r\n            payload: response.data,\r\n          });\r\n          dispatch(load_user());\r\n        })\r\n        .catch((error) => {\r\n          dispatch({\r\n            type: SIGNIN_FAIL,\r\n            payload: {\r\n              error:\r\n                error.response.status === 401\r\n                  ? \"Wrong password.\"\r\n                  : \"An error occured. Please try again.\",\r\n            },\r\n          });\r\n        });\r\n    } else {\r\n      dispatch({\r\n        type: SIGNIN_FAIL,\r\n        payload: {\r\n          error:\r\n            \"Your email address is not verified. Please follow the link sent to your email adress to verify your account.\",\r\n        },\r\n      });\r\n    }\r\n  } else {\r\n    dispatch({\r\n      type: SIGNIN_FAIL,\r\n      payload: {\r\n        error: \"You do not have an account. Sign up instead.\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const signup =\r\n  (email, password, re_password, first_name, last_name) => async (dispatch) => {\r\n    const isRegistered = await accountExists(email);\r\n    if (!isRegistered) {\r\n      const config = {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      };\r\n\r\n      const body = JSON.stringify({\r\n        email,\r\n        password,\r\n        re_password,\r\n        first_name,\r\n        last_name,\r\n      });\r\n\r\n      await axios\r\n        .post(`${process.env.REACT_APP_API_URL}/auth/users/`, body, config)\r\n        .then((response) => {\r\n          dispatch({\r\n            type: SIGNUP_SUCCESS,\r\n            payload: response.data,\r\n          });\r\n          dispatch(load_user());\r\n        })\r\n        .catch((error) => {\r\n          dispatch({\r\n            type: SIGNUP_FAIL,\r\n            payload: {\r\n              error: \"An error occured. Please try again.\",\r\n            },\r\n          });\r\n        });\r\n    } else {\r\n      dispatch({\r\n        type: SIGNUP_FAIL,\r\n        payload: {\r\n          error: \"You already have an account. Sign in instead.\",\r\n        },\r\n      });\r\n    }\r\n  };\r\n\r\nexport const verify = (uid, token) => async (dispatch) => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n  };\r\n\r\n  const body = JSON.stringify({ uid, token });\r\n\r\n  await axios\r\n    .post(\r\n      `${process.env.REACT_APP_API_URL}/auth/users/activation/`,\r\n      body,\r\n      config\r\n    )\r\n    .then((response) => {\r\n      dispatch({\r\n        type: ACTIVATION_SUCCESS,\r\n        payload: response.data,\r\n      });\r\n    })\r\n    .catch((error) => {\r\n      dispatch({\r\n        type: ACTIVATION_FAIL,\r\n        payload: error,\r\n      });\r\n    });\r\n};\r\n\r\nexport const reset_password = (email) => async (dispatch) => {\r\n  const isRegistered = await accountExists(email);\r\n  if (isRegistered) {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    const body = JSON.stringify({ email });\r\n\r\n    await axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/auth/users/reset_password/`,\r\n        body,\r\n        config\r\n      )\r\n      .then(() => {\r\n        dispatch({ type: PASSWORD_RESET_SUCCESS });\r\n      })\r\n      .catch(() => {\r\n        dispatch({ type: PASSWORD_RESET_FAIL });\r\n      });\r\n  } else {\r\n    dispatch({\r\n      type: PASSWORD_RESET_FAIL,\r\n      payload: {\r\n        error: \"You do not have an account. Sign up instead.\",\r\n      },\r\n    });\r\n  }\r\n};\r\n\r\nexport const reset_password_confirm =\r\n  (uid, token, new_password, re_new_password) => async (dispatch) => {\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const body = JSON.stringify({ uid, token, new_password, re_new_password });\r\n\r\n    await axios\r\n      .post(\r\n        `${process.env.REACT_APP_API_URL}/auth/users/reset_password_confirm/`,\r\n        body,\r\n        config\r\n      )\r\n      .then(() => {\r\n        dispatch({ type: PASSWORD_RESET_CONFIRM_SUCCESS });\r\n      })\r\n      .catch((error) => {\r\n        dispatch({\r\n          type: PASSWORD_RESET_CONFIRM_FAIL,\r\n          payload: {\r\n            error:\r\n              error.response.status === 400\r\n                ? \"Your reset link is not valid. Please request another link.\"\r\n                : \"An error occured please try again.\",\r\n          },\r\n        });\r\n      });\r\n  };\r\n\r\nexport const logout = () => (dispatch) => {\r\n  dispatch({ type: LOGOUT });\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}